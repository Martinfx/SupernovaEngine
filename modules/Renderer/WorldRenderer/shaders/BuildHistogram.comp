#version 460 core
#extension GL_EXT_samplerless_texture_functions : require

layout(local_size_x = TILE_SIZE, local_size_y = TILE_SIZE) in;

#include "Resources/Histogram.glsl"

layout(set = 0, binding = 0) uniform texture2D t_SceneColor;

layout(push_constant) uniform _PushConstants {
  float minLogLuminance;
  float oneOverLogLuminanceRange;
  uvec2 extent;
}
u_PC;

shared uint histogram[NUM_HISTOGRAM_BINS];

#include "Lib/Math.glsl"
#include "Lib/Color.glsl"

uint colorToBin(vec3 hdrColor) {
  const float luminance = getLuminance(hdrColor);
  if (luminance < EPSILON) return 0;

  const float logLuminance = clamp01((log2(luminance) - u_PC.minLogLuminance) *
                                     u_PC.oneOverLogLuminanceRange);
  return uint(logLuminance * 254.0 + 1.0);
}

void main() {
  histogram[gl_LocalInvocationIndex] = 0;

  barrier();

  if (all(lessThan(gl_GlobalInvocationID.xy, u_PC.extent))) {
    const vec3 hdrColor =
      texelFetch(t_SceneColor, ivec2(gl_GlobalInvocationID.xy), 0).rgb;
    const uint binIndex = colorToBin(hdrColor);
    atomicAdd(histogram[binIndex], 1);
  }

  barrier();

  atomicAdd(g_Histogram[gl_LocalInvocationIndex],
            histogram[gl_LocalInvocationIndex]);
}
